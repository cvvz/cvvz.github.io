<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Vic&#39;s Blog</title>
		<link>https://cvvz.github.io/post/</link>
		<description>Recent content in Posts on Vic&#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-hans</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Tue, 03 Sep 2019 18:44:12 +0800</lastBuildDate>
		<atom:link href="https://cvvz.github.io/post/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>用树莓派分析函数调用栈</title>
			<link>https://cvvz.github.io/post/call-stack/</link>
			<pubDate>Tue, 03 Sep 2019 18:44:12 +0800</pubDate>
			
			<guid>https://cvvz.github.io/post/call-stack/</guid>
			<description>理解本篇文章需要具备一些GDB、汇编、寄存器的基础知识。可以在阅读的过程中碰到不理解的地方再针对性的学习。 寄存器 分析函数调用栈涉及到的几个特</description>
			<content type="html"><![CDATA[<blockquote>
<p>理解本篇文章需要具备一些GDB、汇编、寄存器的基础知识。可以在阅读的过程中碰到不理解的地方再针对性的学习。</p>
</blockquote>
<h2 id="寄存器">寄存器</h2>
<p>分析函数调用栈涉及到的几个特殊用途的寄存器如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">ARM</th>
<th style="text-align:center">X86</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">r11（fp）</td>
<td style="text-align:center">rbp（ebp）</td>
<td style="text-align:center">栈帧指针</td>
</tr>
<tr>
<td style="text-align:center">r13（sp）</td>
<td style="text-align:center">rsp（esp）</td>
<td style="text-align:center">栈顶指针</td>
</tr>
<tr>
<td style="text-align:center">r14（lr）</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">返回地址</td>
</tr>
<tr>
<td style="text-align:center">r15（pc）</td>
<td style="text-align:center">rip</td>
<td style="text-align:center">指令指针（程序计数器）</td>
</tr>
</tbody>
</table>
<h2 id="函数调用栈">函数调用栈</h2>
<p>如下图（《程序员的自我修养》图10-4）所示：</p>
<figure>
    <img src="/%e6%a0%88.jpg" width="500px"/> 
</figure>

<p>图中，栈帧指针（ebp）指向的内存空间中保存的是上一个栈的栈帧指针（old ebp）。这是X86的情形，在树莓派中分析函数调用栈时发现，ARM的栈帧指针（fp）指向的是函数返回地址。</p>
<p>这只是不同架构CPU的底层实现的不同，并没有优劣之分。</p>
<h3 id="入栈过程">入栈过程</h3>
<p>一个函数的调用过程可以分为如下几步：</p>
<ul>
<li>首先压栈的是参数，且<strong>从右向左</strong>依次压栈；</li>
<li>接着压入返回地址；</li>
<li>接着被调函数执行“标准开头”（x86）：</li>
</ul>
<pre><code class="language-x86asm" data-lang="x86asm">push rbp
mov rbp rsp
</code></pre><p>“标准开头”执行过程如下：</p>
<ul>
<li>首先rbp入栈；</li>
<li>rbp入栈后，rsp自动加8（64位），rsp此时指向存放rbp的栈帧地址；</li>
<li>接着令<code>%rbp=%rsp</code>，这就使得rbp指向存放着上一个栈的rbp的内存地址。</li>
</ul>
<p>而ARM（32位）的“标准开头”长这样：</p>
<pre><code class="language-armasm" data-lang="armasm">push {fp, lr}
add fp, sp, #4
</code></pre><ul>
<li>返回地址(lr)入栈</li>
<li>栈帧指针(fp)入栈</li>
<li>接着令<code>%fp=%sp+4</code>，也就是<strong>使fp（栈帧指针）指向存放返回地址的内存</strong>。</li>
</ul>
<p>不论栈帧指针指向的是上一个栈帧指针，还是返回地址，都能<strong>通过函数的栈帧指针偏移找到调用函数的地址，因此根据栈帧指针的链式关系，可以回溯出整个函数的调用关系链</strong>。这对于一些复杂问题的定位是非常有帮助的。</p>
<blockquote>
<p>GCC的编译选项<code>--fomit-frame-pointer</code>可以使程序不使用栈帧指针，而使用栈指针顶定位函数的局部变量、参数、返回地址等。这么做的好处是可以多出一个寄存器（栈帧指针）供使用，程序运行速度更快，但是就没发很方便的使用GDB进行调试了。</p>
</blockquote>
<h3 id="出栈过程">出栈过程</h3>
<p>出栈与入栈动作刚好相反。</p>
<p>x86的“标准结尾”如下：</p>
<pre><code class="language-x86asm" data-lang="x86asm">leaveq
retq
</code></pre><p>实际上<code>leaveq</code>内部分为两条指令：</p>
<pre><code class="language-x86asm" data-lang="x86asm">movq %rbp, %rsp
popq %rbp
</code></pre><p>所以，出栈过程可以分解为如下三步：</p>
<ul>
<li>第一步是通过将rbp地址赋给rsp，即此时rsp指向的内存存放的是上一个栈的rbp。</li>
<li>第二步弹出栈顶的数据到rbp中，即rbp指向上一个栈的栈底，出栈动作导致rsp自增，于是rsp此时指向的内存中存放函数返回地址；</li>
<li>第三步通过<code>retq</code>指令将栈顶地址pop到rip，即rip此时指向函数退出后的下一条指令，rsp则指向上一个栈的栈顶。</li>
</ul>
<p>这三步做完后，rsp、rbp、rip就恢复到调用函数以前的现场。</p>
<p>ARM的行为和x86一致，它的“标准结尾”长这样：</p>
<pre><code class="language-armasm" data-lang="armasm">sub sp, fp, #4
pop {fp, pc}
</code></pre><h2 id="基于树莓派3分析函数调用栈">基于树莓派3分析函数调用栈</h2>
<p>我在树莓派3中运行了如下所示的C语言代码，并用GDB进行了调试：</p>
<blockquote>
<p>树莓派3使用的是<strong>32位、arm架构CPU</strong>，因此下面的调试过程涉及到的寄存器以及地址信息和64位x86 CPU不同</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-C" data-lang="C"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="kt">void</span> <span class="nf">test2</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">ii</span><span class="p">;</span>
    <span class="n">ii</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">char</span> <span class="nf">test</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%c&#34;</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
    <span class="n">test2</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">ret</span><span class="p">;</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">test</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><h3 id="分析函数调用入栈过程">分析函数调用（入栈）过程</h3>
<p>使用GDB进行调试，将断点打在main函数调用test之前，并使用<code>disassemble</code>查看反汇编结果：</p>
<pre><code class="language-armasm" data-lang="armasm">(gdb) b *0x000104bc
Breakpoint 2 at 0x104bc: file main.c, line 21.
(gdb) disassemble /m main
Dump of assembler code for function main:
18 {
   0x000104a0 &lt;+0&gt;: push {r11, lr}
   0x000104a4 &lt;+4&gt;: add r11, sp, #4
   0x000104a8 &lt;+8&gt;: sub sp, sp, #8

19 char c = 'a';
   0x000104ac &lt;+12&gt;: mov r3, #97 ; 0x61
   0x000104b0 &lt;+16&gt;: strb r3, [r11, #-5]

20 char ret;
21 ret = test(c);
   0x000104b4 &lt;+20&gt;: ldrb r3, [r11, #-5]
   0x000104b8 &lt;+24&gt;: mov r0, r3
=&gt; 0x000104bc &lt;+28&gt;: bl 0x10468 &lt;test&gt;
   0x000104c0 &lt;+32&gt;: mov r3, r0
   0x000104c4 &lt;+36&gt;: strb r3, [r11, #-6]

22 return 0;
   0x000104c8 &lt;+40&gt;: mov r3, #0

23 }
   0x000104cc &lt;+44&gt;: mov r0, r3
   0x000104d0 &lt;+48&gt;: sub sp, r11, #4
   0x000104d4 &lt;+52&gt;: pop {r11, pc}

End of assembler dump.
</code></pre><p>查看此时栈帧指针和栈顶指针的值：</p>
<pre><code class="language-armasm" data-lang="armasm">(gdb) i r r11 sp
r11            0x7efffaec 2130705132
sp             0x7efffae0 0x7efffae0
(gdb) x /xw 0x7efffaec
0x7efffaec: 0x76e8f678
(gdb) info symbol 0x76e8f678
__libc_start_main + 276 in section .text of /lib/arm-linux-gnueabihf/libc.so.6
</code></pre><p>可以看到，栈帧指针指向的返回地址是<code>__libc_start_main + 276</code>，即<strong>main函数是由__libc_start_main调用的</strong>。</p>
<p>由前面分析得知，栈帧指针-4地址处存放的是上一个函数的栈帧指针，于是我们继续向上追溯<code>__libc_start_main</code>的调用者地址，可以发现其值为0：</p>
<pre><code class="language-armasm" data-lang="armasm">(gdb) x /xw 0x7efffaec-4
0x7efffae8: 0x00000000
</code></pre><p><strong>因此可以认为<code>__libc_start_main</code>是所有进程真正的起点。</strong></p>
<p>接着执行调用test函数的命令，使用<code>si</code>单步运行，并查看汇编指令：</p>
<pre><code class="language-armasm" data-lang="armasm">(gdb) si
test (c=0 '\000') at main.c:10
10 {
(gdb) disassemble
Dump of assembler code for function test:
=&gt; 0x00010468 &lt;+0&gt;: push {r11, lr}
   0x0001046c &lt;+4&gt;: add r11, sp, #4
   0x00010470 &lt;+8&gt;: sub sp, sp, #16
   0x00010474 &lt;+12&gt;: mov r3, r0
   0x00010478 &lt;+16&gt;: strb r3, [r11, #-13]
   0x0001047c &lt;+20&gt;: ldrb r3, [r11, #-13]
   0x00010480 &lt;+24&gt;: mov r0, r3
   0x00010484 &lt;+28&gt;: bl 0x10300 &lt;putchar@plt&gt;
   0x00010488 &lt;+32&gt;: ldr r0, [r11, #-8]
   0x0001048c &lt;+36&gt;: bl 0x10440 &lt;test2&gt;
   0x00010490 &lt;+40&gt;: ldrb r3, [r11, #-13]
   0x00010494 &lt;+44&gt;: mov r0, r3
   0x00010498 &lt;+48&gt;: sub sp, r11, #4
   0x0001049c &lt;+52&gt;: pop {r11, pc}
End of assembler dump.
(gdb) i r $lr
lr             0x104c0 66752
(gdb) info symbol $lr
main + 32 in section .text of /root/main
</code></pre><p>可以看到此时lr寄存器中保存的指令即调用test后的下一条指令。继续向下执行：</p>
<pre><code class="language-armasm" data-lang="armasm">(gdb) ni
0x0001046c 10 {
(gdb) i r r11 sp
r11            0x7efffaec 2130705132
sp             0x7efffad8 0x7efffad8
</code></pre><p>观察到将r11和lr入栈后，sp减少了8字节，不难猜测，高4字节存放了lr的值（返回地址），低4字节存放了sp的值（上一个栈的栈帧指针）：</p>
<pre><code class="language-armasm" data-lang="armasm">(gdb) x /xw 0x7efffad8
0x7efffad8: 0x7efffaec
(gdb) x /xw 0x7efffadc
0x7efffadc: 0x000104c0
(gdb) i r $lr $r11
lr             0x104c0 66752
r11            0x7efffaec 2130705132
</code></pre><p>继续执行：</p>
<pre><code class="language-armasm" data-lang="armasm">(gdb) ni
0x00010470 10 {
(gdb) i r $r11
r11            0x7efffadc 2130705116
</code></pre><p>此时r11指向的是函数返回地址，而不是像x86一样指向上一个栈帧指针，和前面所说的一致。</p>
<h2 id="分析函数返回出栈过程">分析函数返回（出栈）过程</h2>
<p>test函数的汇编指令如下所示：</p>
<pre><code class="language-armasm" data-lang="armasm">(gdb) disassemble /m test
Dump of assembler code for function test:
10 {
   0x00010468 &lt;+0&gt;:	push	{r11, lr}
   0x0001046c &lt;+4&gt;:	add	r11, sp, #4
   0x00010470 &lt;+8&gt;:	sub	sp, sp, #16
   0x00010474 &lt;+12&gt;:	mov	r3, r0
   0x00010478 &lt;+16&gt;:	strb	r3, [r11, #-13]

11		int i;
12		printf(&quot;%c&quot;,c);
   0x0001047c &lt;+20&gt;:	ldrb	r3, [r11, #-13]
   0x00010480 &lt;+24&gt;:	mov	r0, r3
   0x00010484 &lt;+28&gt;:	bl	0x10300 &lt;putchar@plt&gt;

13		test2(i);
   0x00010488 &lt;+32&gt;:	ldr	r0, [r11, #-8]
   0x0001048c &lt;+36&gt;:	bl	0x10440 &lt;test2&gt;

14		return c;
   0x00010490 &lt;+40&gt;:	ldrb	r3, [r11, #-13]

15	}
   0x00010494 &lt;+44&gt;:	mov	r0, r3
=&gt; 0x00010498 &lt;+48&gt;:	sub	sp, r11, #4
   0x0001049c &lt;+52&gt;:	pop	{r11, pc}

End of assembler dump.
</code></pre><p>函数运行完毕进入出栈流程的执行过程分为如下几步：</p>
<ul>
<li>首先通过 <code>sub sp, r11, #4</code> 将栈顶指针指向上一个栈帧指针</li>
<li>接着通过 <code>pop {r11, pc}</code> 将上一个栈帧指针赋值给r11，并将返回地址赋值给pc</li>
<li>两次pop后，栈顶指针自动往栈底方向退两次</li>
</ul>
<p>最终，栈顶指针（sp）、栈帧指针（r11）和指令指针（pc）都还原成了main函数调用test前的样子，用GDB查看寄存器内容证实了这一点：</p>
<pre><code class="language-armasm" data-lang="armasm">(gdb) disassemble 
Dump of assembler code for function main:
   0x000104a0 &lt;+0&gt;:	push	{r11, lr}
   0x000104a4 &lt;+4&gt;:	add	r11, sp, #4
   0x000104a8 &lt;+8&gt;:	sub	sp, sp, #8
   0x000104ac &lt;+12&gt;:	mov	r3, #97	; 0x61
   0x000104b0 &lt;+16&gt;:	strb	r3, [r11, #-5]
   0x000104b4 &lt;+20&gt;:	ldrb	r3, [r11, #-5]
   0x000104b8 &lt;+24&gt;:	mov	r0, r3
   0x000104bc &lt;+28&gt;:	bl	0x10468 &lt;test&gt;
=&gt; 0x000104c0 &lt;+32&gt;:	mov	r3, r0
   0x000104c4 &lt;+36&gt;:	strb	r3, [r11, #-6]
   0x000104c8 &lt;+40&gt;:	mov	r3, #0
   0x000104cc &lt;+44&gt;:	mov	r0, r3
   0x000104d0 &lt;+48&gt;:	sub	sp, r11, #4
   0x000104d4 &lt;+52&gt;:	pop	{r11, pc}
End of assembler dump.
(gdb) i r r11 sp pc
r11            0x7efffaec	2130705132
sp             0x7efffae0	0x7efffae0
pc             0x104c0	0x104c0 &lt;main+32&gt;
</code></pre>]]></content>
		</item>
		
		<item>
			<title>安全知识总结</title>
			<link>https://cvvz.github.io/post/about-computer-security/</link>
			<pubDate>Thu, 22 Aug 2019 12:38:04 +0800</pubDate>
			
			<guid>https://cvvz.github.io/post/about-computer-security/</guid>
			<description>加解密算法 对称加密： 用同一个秘钥进行加密和解密，代表算法有AES/DES/RC2/RC5等； 非对称加密： 一次产生公钥和私钥两个秘钥，任意一个</description>
			<content type="html"><![CDATA[<h2 id="加解密算法">加解密算法</h2>
<p><strong>对称加密：</strong> 用同一个秘钥进行加密和解密，代表算法有<code>AES/DES/RC2/RC5</code>等；</p>
<p><strong>非对称加密：</strong> 一次产生公钥和私钥两个秘钥，任意一个都能进行加密，解密则需要用另外一个。具体的用法是：公钥用来“加密”（相应的私钥用来解密），私钥用来“签名”（相应的公钥用来校验）。代表算法有<code>RSA/DSA/ECC/DH</code>等。</p>
<p><strong>摘要：</strong> 摘要是对数据计算Hash值，Hash值不可逆，是一种单向加密。<code>shadow</code>文件中保存的用户密码就是密码明文的Hash值。代表算法有<code>MD5/SHA256</code>等。</p>
<h2 id="ssl协议">SSL协议</h2>
<p>SSL协议工作在传输层和应用层之间。在TCP协议的三次握手之后，进行SSL协议的握手。</p>
<p>SSL握手过程：</p>
<ul>
<li>客户端发送随机数x和自己支持的加密算法</li>
<li>服务端发送随机数y、公钥和选择的加密算法</li>
<li>客户端发送通过公钥加密的随机数z的密文</li>
<li>客户端、服务端用xyz算出对称加密的密钥</li>
<li>双方进行对称加密通信。</li>
</ul>
<h2 id="ssh协议">SSH协议</h2>
<h3 id="密码登录">密码登录</h3>
<ul>
<li>主机将自己的公钥（主机密钥HostKey）发到客户端（HostKey路径在sshd的配置文件中配置）</li>
<li>客户端计算公钥指纹（摘要），询问用户是否信任该kostkey，信任则将key值记录在known_hosts中，下次登录相同服务器时若hostkey相同不必再次确认；否则提示hostkey不一致</li>
<li>用户输入密码，客户端使用公钥加密密码明文并发送到服务端，服务端使用私钥解密并进行密码校验。</li>
</ul>
<p>由于存在发送服务器公钥的过程，因此存在中间人攻击的安全隐患。</p>
<h3 id="公钥登录">公钥登录</h3>
<p>SSH公钥登录解决了SSH协议中的中间人攻击的问题。</p>
<ul>
<li>用户事先生成一对公/私钥，将公钥提前导入到服务器，</li>
<li>登录时，服务器首先发送一个随机数到客户端，</li>
<li>客户端使用私钥加密随机数返回服务端，</li>
<li>服务端使用公钥校验通过则允许登录。</li>
</ul>
<h2 id="中间人攻击">中间人攻击</h2>
<p>SSL协议以及SSH密码登录方式，都存在着中间人攻击的威胁，主要安全隐患在于握手过程中服务端发送的公钥可能被中间人截取，客户端不能确定服务端发送的公钥是否可信。</p>
<h2 id="证书">证书</h2>
<p>证书解了服务端公钥不可信的问题。</p>
<p>证书中记录了服务器的公钥信息，服务器不直接发送公钥，而是发送从CA中心申请到的证书。CA中心把公钥及其他证书信息一起进行摘要计算，再对其进行签名，最终的证书中存放的是公钥、证书信息、数字签名。</p>
<p>因为有了CA中心的数字签名，只要用相应的CA中心的公钥对签名进行校验（即比较解密后的摘要值和本地计算的摘要值是否相同）通过，就能安全使用公钥进行加密。</p>
<p>CA中心的公钥一般预置在操作系统中的根CA证书中。既然CA中心的公钥是用来对签名进行校验的，那么相应的，这个根CA证书就是用来对服务器发来的证书进行校验的。</p>
<h2 id="证书链">证书链</h2>
<p>一般我们不会直接拿根CA证书对应的私钥去做证书的签发，因为频繁使用根证书对应的私钥会增加其泄露的可能性。</p>
<p>安全的做法是：CA中心给二级CA中心签发一个证书（即二级CA证书，二级CA中心严格保存其对应的私钥），二级CA中心再给三级CA中心签发证书&hellip;依次类推。</p>
<p>因此，服务提供者去N级CA中心签发证书时，生成的不再是证书，而是<code>证书链</code>，证书链中依次记录着服务器证书、N级CA证书、N-1级CA证书&hellip;二级CA证书。证书校验时，用根CA证书校验二级CA证书、二级CA证书校验三级CA证书&hellip;最后N级校验服务器证书，只有全部校验通过，服务器证书才算被客户端校验通过。</p>
<h2 id="浏览器通过https协议访问网站的过程">浏览器通过HTTPS协议访问网站的过程</h2>
<ol>
<li>通过本地的DNS配置文件找到DNS服务器地址。</li>
<li>DNS服务器将网址解析为ip地址返回。</li>
<li>本机通过链路层的arp协议找到局域网的路由器。（二层）</li>
<li>路由器通过ip地址路由寻址找到ip地址对应的主机。（三层）</li>
<li>主机通过TCP协议找到本机的端口号（进程listen）。（四层）</li>
<li>TCP三次握手。</li>
<li><strong>使用证书</strong>进行SSL握手（主机将自己的证书链发到浏览器，浏览器使用操作系统预置CA证书进行校验，校验不通过会提示链接不安全的风险）。（SSL层）</li>
<li>服务器进程和浏览器进程在应用层使用HTTP协议交换数据。（七层）</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>进程和线程</title>
			<link>https://cvvz.github.io/post/process-and-thread/</link>
			<pubDate>Sun, 23 Jun 2019 20:34:56 +0800</pubDate>
			
			<guid>https://cvvz.github.io/post/process-and-thread/</guid>
			<description>从“程序”开始 对于UNIX操作系统，程序是存放在磁盘上的ELF文件（可以通过file命令查看文件类型） 对于windows操作系统，程序是存放</description>
			<content type="html"><![CDATA[<h2 id="从程序开始">从“程序”开始</h2>
<ul>
<li>对于UNIX操作系统，程序是存放在磁盘上的<strong>ELF文件</strong>（可以通过<code>file</code>命令查看文件类型）</li>
<li>对于windows操作系统，程序是存放在磁盘上的<strong>PE文件</strong>，其中最常见的是<code>.exe</code>文件。</li>
</ul>
<p>编译器将高级语言编写成的程序编译成机器码，操作系统将ELF文件读入内存后，ELF文件中的<strong>代码段</strong>也就是CPU可以执行的机器码（可以通过<code>readelf</code>命令查看ELF文件的代码段内容），CPU从内存中读取机器码并执行。</p>
<h2 id="为进程分配资源">为进程分配资源</h2>
<p>进程产生的标志是：内核为每一个进程都分配了一个<code>task_struct</code>结构体，在<code>task_struct</code>中记录了这个进程所拥有的资源，如全局变量、虚拟内存等，所以说<strong>进程是资源分配的最小单位</strong>。</p>
<h2 id="调度线程">调度线程</h2>
<p><strong>线程是CPU调度的最小单位</strong>，也就是说<strong>内核进行调度的对象实际上是线程，而进程是负责为线程提供共享资源的</strong>。</p>
<p>一个进程中的多个线程共享这个进程的资源，但是<strong>它们虽然共享同一片虚拟内存，自身却拥有这片虚拟内存中的不同的栈空间</strong>；</p>
<h2 id="通信方式">通信方式</h2>
<p>由于同一进程中的线程共享资源，所以通信非常方便，直接读写同一块用户态内存即可，但是这必然就涉及到互斥和原子性问题。</p>
<p>而进程要实现通信则需要借助内核和文件，所有的IPC，都是把内核和文件充当交换信息的桥梁。</p>
<h2 id="上下文切换">上下文切换</h2>
<blockquote>
<p>同一进程中的线程上下文切换，简称<strong>线程上下文切换</strong>。</p>
<p>不同进程中的线程上下文切换，简称<strong>进程上下文切换</strong>。</p>
</blockquote>
<p>不管是线程上下文切换，还是进程上下文切换，都会涉及CPU寄存器和程序计数器的保存和更新。<strong>因此都涉及CPU上下文切换</strong>。</p>
<p>由于线程共享进程中的虚拟内存空间，所以线程上下文切换时，<strong>不需要更新虚拟内存到物理内存的内存映射表</strong>。而进程上下文切换时，则要更新虚拟内存到物理内存的内存映射表。</p>
<p>当内核找不到虚拟内存到物理内存的映射关系时，便会产生<code>缺页中断</code>。所以<strong>进程上下文切换后，程序执行更容易产生缺页中断</strong>。</p>
<h2 id="怎么理解linux中的线程是以进程的方式实现的">怎么理解Linux中的线程是以进程的方式实现的</h2>
<ul>
<li>对于支持线程的操作系统而言，如果一个进程中有N个线程，则存在一个进程描述符，依次轮流指向N个线程。这个进程描述符指明共享资源，包括内存空间和打开的文件。而每一个线程描述它们自己独享的资源。也就是说<strong>内核中描述线程的结构体和描述进程的结构体不同</strong>。</li>
<li>而在Linux中，则有N个<code>task_struct</code>数据结构，只是这些数据结构的某些资源项是共享的，某些是独占的。</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>gdb中的多线程和信号处理</title>
			<link>https://cvvz.github.io/post/gdb-muti-process-and-signal-handle/</link>
			<pubDate>Mon, 10 Jun 2019 11:44:52 +0800</pubDate>
			
			<guid>https://cvvz.github.io/post/gdb-muti-process-and-signal-handle/</guid>
			<description>多线程调试 使用GDB调试多线程时，控制程序的执行模式主要分两种：all-stop 模式和 non-stop 模式。 All-Stop 任何一个线程在断点处hang住时，所有其他线</description>
			<content type="html"><![CDATA[<h2 id="多线程调试">多线程调试</h2>
<p>使用GDB调试多线程时，控制程序的执行模式主要分两种：all-stop 模式和 non-stop 模式。</p>
<h3 id="all-stop">All-Stop</h3>
<blockquote>
<p>任何一个线程在断点处hang住时，所有其他线程也会hang住。默认为all-stop模式。</p>
</blockquote>
<ol>
<li>
<p>在all-stop模式中，当一个线程到达断点或产生信号，GDB将自动选择该线程作为当前线程并停住（提示<code>Switching to Thread n</code>），并且其他线程也都会停止运行；</p>
</li>
<li>
<p>当执行<code>continue</code>、<code>until</code>、<code>finish</code>、<code>next</code>、<code>step</code>等使线程继续运行，所有线程会同时继续运行，直到某一个线程再次被stop，然后该线程成为当前线程。</p>
</li>
<li>
<p>这里还存在这样一种情况：当你单步跟踪某个线程时，这个线程一定是执行了某条完整语句后在下一条语句前停住，<strong>但是这段时间里其他线程可能执行了半条、一条或多条语句</strong>。</p>
</li>
<li>
<p>在all-stop模式下，可以通过设定<code>scheduler-locking</code>（调度器锁定）来控制CPU调度器的行为从而控制多线程的并发运行行为。</p>
<ul>
<li><code>set scheduler-locking off</code>：默认调度器锁定为关，也就是CPU也可以进行自由调度，那么所有线程是“同进同止”的，一起stop，一起继续运行，竞争CPU资源；</li>
<li><code>set scheduler-locking on</code>：开启调度器锁定，不允许CPU自由调度，CPU只能执行当前线程中的指令，其他线程一直处于stop状态；</li>
</ul>
</li>
</ol>
<h3 id="non-stop">Non-Stop</h3>
<blockquote>
<p>任何一个线程被stop甚至单步调试时，其他线程可以自由运行。</p>
</blockquote>
<ol>
<li>通过<code>set non-stop on</code>手动开启non-stop模式。一般non-stop模式搭配异步执行命令使用。</li>
<li>GDB的可执行命令分为两种：同步执行和异步执行。
<ul>
<li>同步执行：即执行一条命令后，要等待有线程被stop了才会在弹出命令提示符。这是默认执行模式。</li>
<li>异步执行：立刻返回弹出命令提示符。打开命令异步执行模式开关的命令是<code>set target-async on</code>。</li>
</ul>
<blockquote>
<p>在命令后跟<code>&amp;</code>表示该命令以异步的方式执行，如<code>attach&amp;</code>、<code>continue&amp;</code>等。</p>
</blockquote>
</li>
<li>non-stop模式下可使用<code>interrupt</code>停止当前运行中的线程，<code>interrupt -a</code>停下所有线程。</li>
</ol>
<h2 id="信号处理">信号处理</h2>
<p>GDB能够检测到程序中产生的信号，并进行针对性的处理。通过<code>info handle</code>查看对所有信号的处理方式：</p>
<ul>
<li>Stop：检测到信号是否停住程序的运行；</li>
<li>Print：是否打印收到该信号的信息；</li>
<li>Pass to program：是否把该信号传给进程处理（或者说是否屏蔽该信号，无法屏蔽<code>SIGKILL</code>和<code>SIGSTOP</code>信号）</li>
</ul>
<p>通过<code>handle SIG</code>来指定某个信号的处理方式。</p>
]]></content>
		</item>
		
		<item>
			<title>解剖进程虚拟内存空间</title>
			<link>https://cvvz.github.io/post/anatomy-of-a-program-in-memory/</link>
			<pubDate>Fri, 07 Jun 2019 23:14:03 +0800</pubDate>
			
			<guid>https://cvvz.github.io/post/anatomy-of-a-program-in-memory/</guid>
			<description>对于32位 x86 Linux操作系统，典型的进程地址空间如下图所示： 每一个进程运行在各自独立的虚拟内存空间中，从0x00000000到0xFFFF</description>
			<content type="html"><![CDATA[<p>对于<strong>32位 x86 Linux操作系统</strong>，典型的进程地址空间如下图所示：</p>
<figure>
    <img src="/linuxFlexibleAddressSpaceLayout.png" width="750px"/> 
</figure>

<p>每一个进程运行在各自独立的虚拟内存空间中，从0x00000000到0xFFFFFFFF，共4GB。</p>
<p>进程地址空间从低到高依次是：</p>
<ul>
<li><strong>Text Segment：</strong> 机器指令，只读，一个程序的多个进程共享一个正文段。</li>
</ul>
<blockquote>
<p>如果进程带有调试信息，可以通过<code>addr2line</code> + 正文段地址获得对应的源代码位置。</p>
</blockquote>
<ul>
<li>
<p><strong>Data Segment：</strong> 具有初值的全局/静态变量。</p>
</li>
<li>
<p><strong>BSS Segment：</strong> 未赋初值的全局/静态变量。</p>
</li>
<li>
<p><strong>Heap：</strong> 堆。堆从低地址向高地址生长。堆区内存在分配过程中可能产生内存碎片：</p>
</li>
</ul>
<p><img src="/fragmentedHeap.png" alt="内存碎片" title="内存碎片"></p>
<blockquote>
<p>申请堆内存的接口是阻塞接口，即可能因为暂时分配不到够大的堆空间导致进程让出CPU。</p>
</blockquote>
<ul>
<li>
<p><strong>Memory Mapping Segment：</strong> 内存映射区。动态库、mmap、共享内存使用的都是内存映射区。</p>
</li>
<li>
<p><strong>Stack：</strong> 栈。栈从高地址向低地址生长。进程栈空间的总大小可通过
<code>ulimit -s</code>查看，默认为8MB。栈中不仅存放着局部变量，<strong>每次函数调用时，参数、返回地址、寄存器值等都会进行压栈。</strong></p>
</li>
<li>
<p><strong>Kernel space：</strong> 进程地址空间的最高1GB是内核空间。<strong>内核空间被所有进程共享</strong>，但是用户态进程只有通过系统调用陷入内核态才能执行内核态代码。</p>
</li>
</ul>
<blockquote>
<p>参考文章：<a href="https://manybutfinite.com/post/anatomy-of-a-program-in-memory/">https://manybutfinite.com/post/anatomy-of-a-program-in-memory/</a></p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Git使用心得</title>
			<link>https://cvvz.github.io/post/usage-of-git/</link>
			<pubDate>Sun, 02 Jun 2019 23:41:24 +0800</pubDate>
			
			<guid>https://cvvz.github.io/post/usage-of-git/</guid>
			<description>整理一下最近学习的git知识，以及平时常用的git功能。 .git 使用git init或clone一个远端仓，会在本地建立一个.git目录。这个目录是</description>
			<content type="html"><![CDATA[<blockquote>
<p>整理一下最近学习的git知识，以及平时常用的git功能。</p>
</blockquote>
<h2 id="git">.git</h2>
<p>使用git init或clone一个远端仓，会在本地建立一个.git目录。<strong>这个目录是git仓的全部，把.git拷贝到其他目录下，就能在该目录下建立一个一模一样的git仓</strong>。</p>
<h2 id="缓存区staged">缓存区（staged）</h2>
<ul>
<li>对working derictoy中的文件做的改动，他们的状态是unstaged</li>
<li>使用 <code>git add</code>/<code>git rm</code>/<code>git mv</code> 将其送入缓存区（staged）</li>
<li>使用 <code>git commit</code> 提交缓存区中记录的改动。</li>
<li><code>git diff {filename}</code> 可以查看unstaged和staged中文件的不同</li>
<li><code>git diff --staged {filename}</code> 可以查看staged中的文件和原文件的不同</li>
<li>注意staged和<code>stash</code>的区别</li>
</ul>
<h2 id="上游分支">上游分支</h2>
<p><code>git clone</code>可以通过参数 <code>-b</code> 来指定clone远端仓库到本地后拉取哪条分支，不指定则默认拉取<code>master</code>；远端仓库中必须存在同名分支，作为本地分支的上游分支。</p>
<p>通过<code>git branch -vv</code> 或 <code>git status</code> 命令可以查看本地分支相比上游分支领先/落后多少个commit。</p>
<p><code>git checkout -b {local_branch} {remote_branch}</code>用来创建并切换分支，并指定该分支的上游分支。</p>
<h2 id="revert和reset">revert和reset</h2>
<p><code>git reset</code>把HEAD指针指向到某一个commit id，这次commit之后的所有commit都会被删除。</p>
<p><code>git revert</code>用来撤销某一次commit带来的变化，不会影响其他commit。revert本身也需要commit。</p>
<p>非fast-forward形式合并两条分支时，git会自动生成一个合并提交。如果想回退某条分支的merge操作，可以revert这次合并提交的commit，git会让你选择留下这次合并提交的哪一个父分支，另一个父分支所作的改动会被回退。</p>
<h2 id="如何修改一次历史commit">如何修改一次历史commit</h2>
<p>执行<code>git rebase -i {commitid}^</code>（commitid是想要修改的那次提交），git会以commitid的前一次提交作为base，采用交互式的方式，重新提交后面的每一次commit，将想要修改的那一次的提交命令设置为edit即可。</p>
]]></content>
		</item>
		
		<item>
			<title>进程间通信</title>
			<link>https://cvvz.github.io/post/ipc/</link>
			<pubDate>Fri, 02 Nov 2018 22:34:20 +0800</pubDate>
			
			<guid>https://cvvz.github.io/post/ipc/</guid>
			<description>进程间通信的六种方式： 管道 共享内存 消息队列 信号量 信号 socket 管道 管道机制和UNIX系统的文件系统密切关联，使用管道和使用文件系统非常类似。实际上使</description>
			<content type="html"><![CDATA[<p>进程间通信的六种方式：</p>
<ul>
<li>管道</li>
<li>共享内存</li>
<li>消息队列</li>
<li>信号量</li>
<li>信号</li>
<li>socket</li>
</ul>
<h1 id="管道">管道</h1>
<p>管道机制和UNIX系统的文件系统密切关联，使用管道和使用文件系统非常类似。实际上使用<strong>管道可以看成是创建了一个不会残留的临时文件，一个进程写文件，另一个进程读文件，从而实现了进程间通信</strong>。</p>
<p>管道分为 <strong>匿名管道</strong> 和 <strong>FIFO</strong>。</p>
<h2 id="匿名管道">匿名管道</h2>
<p>使用 <code>pipe</code> 函数创建匿名管道。它返回两个文件描述符，<code>fd[0]</code>是管道的读端，<code>fd[1]</code>是写端。</p>
<p>如果进程只调用<code>pipe</code>，那么只能自写自读，基本没什么用。</p>
<p>因此，<strong>使用<code>pipe</code>创建管道后，必然要使用 <code>fork</code> 创建子进程，这样就可以做到父子进程使用不同的fd进行读写通信</strong>。</p>
<h3 id="popen">popen</h3>
<p>库函数 <code>popen</code> 就是使用匿名管道实现的。函数原型：</p>
<div class="highlight"><pre class="chroma"><code class="language-C" data-lang="C"><span class="n">FILE</span> <span class="o">*</span> <span class="n">popen</span><span class="err">（</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">cmdstring</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">type</span><span class="err">）</span><span class="p">;</span>
</code></pre></div><p><code>popen</code>创建了一个管道，然后执行fork，在子进程中使用<code>exec</code>执行cmdstring；返回的文件指针根据参数type指向管道的读或写端。</p>
<p>type可取&quot;w&quot;和&quot;r&quot;：</p>
<ul>
<li>
<p>取&quot;w&quot;时，返回的文件指针指向管道的写端fd[1]，子进程通过<code>dup2</code>将<code>stdin</code>复制到fd[0]，而cmdstring执行依赖<code>stdin</code>，就等于依赖父进程通过文件指针写入管道了；</p>
</li>
<li>
<p>取&quot;r&quot;时，文件指针指向管道的读端fd[0]，子进程通过<code>dup2</code>将<code>stdout</code>复制到fd[1]，而cmdstring执行默认输出到<code>stdout</code>，那么父进程就可以通过该文件指针读出cmdstring命令的输出。</p>
</li>
</ul>
<p>通过 <code>pclose</code> 函数关闭打开的文件指针，并使用<code>waitpid</code>关闭子进程;因此<code>popen</code>后如果不执行<code>pclose</code>将造成内存泄漏和僵尸进程。</p>
<h2 id="fifo">FIFO</h2>
<p><code>FIFO</code>可以用来在不相关的进程间通信。</p>
<p><code>FIFO</code>是一种文件类型，所以创建<code>FIFO</code>就是创建文件。通过 <code>mkfifo</code> 函数创建 <code>FIFO</code> 时，要指定一个具体的文件路径。</p>
<p>创建了<code>FIFO</code>之后，就可以通过标准文件操作（<code>open</code>、<code>read</code>、<code>write</code>、<code>close</code>）来使用它。毕竟在Linux中，一切皆文件。</p>
<h1 id="xsi-ipc">XSI IPC</h1>
<p><strong>消息队列、信号量、共享内存被统称为<code>XSI IPC</code></strong>，他们之间有很多共通之处：</p>
<ol>
<li>独立于文件系统，有自己的一套操作管理函数和内核数据结构；不能像管理文件一样管理这些资源。</li>
<li>这些资源归属于操作系统，而不属于某个进程，如果进程退出前忘记回收资源，资源不会自己释放掉，可能影响系统内其他进程。</li>
<li>进程通过<code>xxxget</code>函数并指定参数key的方式获得一个id，通过id来使用和管理指定的资源；id是进程内管理资源的标识符，不具有全局性，key值才是全局标识符；两个进程指定同一个key值就能获取同一个资源，从而关联起来。</li>
</ol>
<h2 id="信号量">信号量</h2>
<p>信号量(semaphore)作为IPC的角色是专门用来控制多个进程访问共享资源的，实际就是一个计数器。</p>
<p>通过<code>semget</code>、<code>semctl</code>、<code>semop</code>管理信号量。</p>
<h2 id="共享内存和mmap">共享内存和mmap</h2>
<h3 id="mmap">mmap</h3>
<p><code>mmap</code>把磁盘上某个具体文件映射到进程的内存映射区中，以实现对文件更快的读写。</p>
<p>通过将同一文件映射到不同的进程中内存空间，就可以实现进程间共享内存通信。</p>
<h3 id="共享内存">共享内存</h3>
<p>共享内存可以看成是把内核中的一块内存映射到进程的内存映射区。这样，两个进程共享同一块内存就可以实现通信了，由于是直接对内存读写，这种IPC方式也是最快的。</p>
<p>通过<code>shmget</code>、<code>shmctl</code>、<code>shmat</code>、<code>shmdt</code>管理共享内存。</p>
]]></content>
		</item>
		
	</channel>
</rss>
