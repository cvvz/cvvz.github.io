<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on Vic&#39;s Blog</title>
    <link>https://cvvz.github.io/tags/kubernetes/</link>
    <description>Recent content in kubernetes on Vic&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 30 Dec 2020 15:42:01 +0800</lastBuildDate><atom:link href="https://cvvz.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>kubernetes网络之service</title>
      <link>https://cvvz.github.io/post/k8s-network-service/</link>
      <pubDate>Wed, 30 Dec 2020 15:42:01 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-network-service/</guid>
      <description>在kubernetes中，service其实只是一个保存在etcd里的API对象，并不对应任何具体的实体，真正起作用的是watch servi</description>
    </item>
    
    <item>
      <title>kubernetes网络之CNI与跨节点通信原理</title>
      <link>https://cvvz.github.io/post/k8s-network-cross-host/</link>
      <pubDate>Wed, 30 Dec 2020 09:51:44 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-network-cross-host/</guid>
      <description>初始化infra容器网络环境 当kubelet通过调用CRI的RunPodSandbox创建好PodSandbox，即infra容器后，就需要</description>
    </item>
    
    <item>
      <title>kubernetes网络之DNS</title>
      <link>https://cvvz.github.io/post/k8s-network-dns/</link>
      <pubDate>Wed, 30 Dec 2020 09:41:51 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-network-dns/</guid>
      <description>Service和DNS 尽管kubelet在启动容器时，会将同namespace下的Service信息注入到容器的环境变量中： 1➜ ~ kubectl get svc | grep</description>
    </item>
    
    <item>
      <title>容器相关知识汇总</title>
      <link>https://cvvz.github.io/post/container/</link>
      <pubDate>Thu, 24 Dec 2020 10:33:00 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/container/</guid>
      <description>容器镜像 容器镜像就是容器的rootfs。通过 Dockerfile 制作容器镜像时，就相当于增加 rootfs 层。通过容器镜像运行一个容器时，操作系统内核先将镜像中的每</description>
    </item>
    
    <item>
      <title>为什么删除Pod时webhook收到三次delete请求</title>
      <link>https://cvvz.github.io/post/k8s-3-deletion-webhook/</link>
      <pubDate>Sun, 13 Dec 2020 19:26:15 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-3-deletion-webhook/</guid>
      <description>最近在玩admission webhook时，发现一个奇怪的现象：我配置了validatingWebhookConfiguration使其监</description>
    </item>
    
    <item>
      <title>Kubernetes Volume实现原理</title>
      <link>https://cvvz.github.io/post/k8s-volume/</link>
      <pubDate>Sat, 12 Dec 2020 12:32:33 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-volume/</guid>
      <description>容器运行时挂载卷的过程 如果CRI是通过dockershim实现的话，kubelet通过CRI接口去拉起一个容器，就好比是通过docker-d</description>
    </item>
    
    <item>
      <title>以aggregated API server的方式部署admission webhook</title>
      <link>https://cvvz.github.io/post/why-aggregated-api-server-webhook/</link>
      <pubDate>Tue, 01 Dec 2020 07:19:06 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/why-aggregated-api-server-webhook/</guid>
      <description>openshift 的 generic-admission-server库 是用来编写admission webhook的lib库，它声称使用该库可以避免为每一个w</description>
    </item>
    
    <item>
      <title>kubectl patch</title>
      <link>https://cvvz.github.io/post/k8s-kubectl-patch/</link>
      <pubDate>Sun, 22 Nov 2020 23:16:44 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-kubectl-patch/</guid>
      <description>kubectl patch 用来修改 Kubernetes API 对象的字段。可以通过 --type 参数指定三种不同类型的 patch 方式： strategic：strategic merge patch merge： json merge patch json： json</description>
    </item>
    
    <item>
      <title>浅谈kubernetes监控体系</title>
      <link>https://cvvz.github.io/post/k8s-monitor/</link>
      <pubDate>Fri, 20 Nov 2020 00:24:35 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-monitor/</guid>
      <description>监控和指标 理解监控 我们可以把监控系统划分为：采集指标、存储、展示和告警四个部分。 存储使用时序数据库TSDB、前端展示使用grafana、告警</description>
    </item>
    
  </channel>
</rss>
