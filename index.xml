<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vic&#39;s Blog</title>
    <link>https://cvvz.github.io/</link>
    <description>Recent content on Vic&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 30 Dec 2020 15:42:01 +0800</lastBuildDate><atom:link href="https://cvvz.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>kubernetes网络之service</title>
      <link>https://cvvz.github.io/post/k8s-network-service/</link>
      <pubDate>Wed, 30 Dec 2020 15:42:01 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-network-service/</guid>
      <description>在kubernetes中，service其实只是一个保存在etcd里的API对象，并不对应任何具体的实例。service即k8s中的“微服务</description>
    </item>
    
    <item>
      <title>kubernetes网络之CNI与跨节点通信原理</title>
      <link>https://cvvz.github.io/post/k8s-network-cross-host/</link>
      <pubDate>Wed, 30 Dec 2020 09:51:44 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-network-cross-host/</guid>
      <description>初始化infra容器网络环境 当kubelet通过调用CRI的RunPodSandbox创建好PodSandbox，即infra容器后，就需要</description>
    </item>
    
    <item>
      <title>kubernetes网络之DNS</title>
      <link>https://cvvz.github.io/post/k8s-network-dns/</link>
      <pubDate>Wed, 30 Dec 2020 09:41:51 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-network-dns/</guid>
      <description>默认DNS策略 Pod默认的dns策略是 ClusterFirst，意思是先通过kubernetes的权威DNS服务器（如CoreDNS）直接</description>
    </item>
    
    <item>
      <title>容器相关知识汇总</title>
      <link>https://cvvz.github.io/post/container/</link>
      <pubDate>Thu, 24 Dec 2020 10:33:00 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/container/</guid>
      <description>容器镜像 容器镜像就是容器的rootfs。通过 Dockerfile 制作容器镜像时，就相当于增加 rootfs 层。通过容器镜像运行一个容器时，操作系统内核先将镜像中的每</description>
    </item>
    
    <item>
      <title>为什么删除Pod时webhook收到三次delete请求</title>
      <link>https://cvvz.github.io/post/k8s-3-deletion-webhook/</link>
      <pubDate>Sun, 13 Dec 2020 19:26:15 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-3-deletion-webhook/</guid>
      <description>最近在玩admission webhook时，发现一个奇怪的现象：我配置了validatingWebhookConfiguration使其监</description>
    </item>
    
    <item>
      <title>Kubernetes Volume实现原理</title>
      <link>https://cvvz.github.io/post/k8s-volume/</link>
      <pubDate>Sat, 12 Dec 2020 12:32:33 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-volume/</guid>
      <description>容器运行时挂载卷的过程 如果CRI是通过dockershim实现的话，kubelet通过CRI接口去拉起一个容器，就好比是通过docker-d</description>
    </item>
    
    <item>
      <title>浅谈单机容器网络</title>
      <link>https://cvvz.github.io/post/container-network/</link>
      <pubDate>Thu, 03 Dec 2020 00:16:18 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/container-network/</guid>
      <description>容器网络环境隔离怎么理解？ 容器的网络环境是隔离的，这个隔离就体现在不共用内核网络协议栈，即不共用网络协议栈要用到的数据和设备了： 传输层：端口</description>
    </item>
    
    <item>
      <title>以aggregated API server的方式部署admission webhook</title>
      <link>https://cvvz.github.io/post/why-aggregated-api-server-webhook/</link>
      <pubDate>Tue, 01 Dec 2020 07:19:06 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/why-aggregated-api-server-webhook/</guid>
      <description>openshift 的 generic-admission-server库 是用来编写admission webhook的lib库，它声称使用该库可以避免为每一个w</description>
    </item>
    
    <item>
      <title>kubectl patch</title>
      <link>https://cvvz.github.io/post/k8s-kubectl-patch/</link>
      <pubDate>Sun, 22 Nov 2020 23:16:44 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-kubectl-patch/</guid>
      <description>kubectl patch 用来修改 Kubernetes API 对象的字段。可以通过 --type 参数指定三种不同类型的 patch 方式： strategic：strategic merge patch merge： json merge patch json： json</description>
    </item>
    
    <item>
      <title>浅谈kubernetes监控体系</title>
      <link>https://cvvz.github.io/post/k8s-monitor/</link>
      <pubDate>Fri, 20 Nov 2020 00:24:35 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-monitor/</guid>
      <description>监控和指标 理解监控 我们可以把监控系统划分为：采集指标、存储、展示和告警四个部分。 存储使用时序数据库TSDB、前端展示使用grafana、告警</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://cvvz.github.io/about/</link>
      <pubDate>Thu, 29 Oct 2020 17:29:14 +0800</pubDate>
      
      <guid>https://cvvz.github.io/about/</guid>
      <description>chenweizhi@meituan</description>
    </item>
    
    <item>
      <title>【问题定位】Celery Worker产生僵尸进程</title>
      <link>https://cvvz.github.io/post/celery-worker-zombie/</link>
      <pubDate>Mon, 30 Mar 2020 10:36:36 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/celery-worker-zombie/</guid>
      <description>组内有一个基于Flask + rabbitMQ + Celery搭建的web平台，最近在上面开发需求时碰到了一个比较有趣的问题，在这里记录下来。 问题背景 web平台</description>
    </item>
    
    <item>
      <title>用树莓派分析函数调用栈</title>
      <link>https://cvvz.github.io/post/call-stack/</link>
      <pubDate>Tue, 03 Sep 2019 18:44:12 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/call-stack/</guid>
      <description>理解本篇文章需要具备一些GDB、汇编、寄存器的基础知识。可以在阅读的过程中碰到不理解的地方再针对性的学习。 寄存器 分析函数调用栈涉及到的几个特</description>
    </item>
    
    <item>
      <title>安全知识总结</title>
      <link>https://cvvz.github.io/post/about-computer-security/</link>
      <pubDate>Thu, 22 Aug 2019 12:38:04 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/about-computer-security/</guid>
      <description>加解密算法 对称加密： 用同一个秘钥进行加密和解密，代表算法有AES/DES/RC2/RC5等； 非对称加密： 一次产生公钥和私钥两个秘钥，任意一个</description>
    </item>
    
    <item>
      <title>抓包解读smtp和tls协议</title>
      <link>https://cvvz.github.io/post/smtp-with-tls/</link>
      <pubDate>Sat, 22 Jun 2019 23:21:54 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/smtp-with-tls/</guid>
      <description>背景：某进程调用 libcurl 提供的 curl_easy_perform 接口与邮箱服务器进行smtp通信时，服务端返回56(CURLE_RECV_ERROR)错误。由于服务端日志信息不足</description>
    </item>
    
    <item>
      <title>【问题定位】异步回调函数造成踩内存</title>
      <link>https://cvvz.github.io/post/coredump/</link>
      <pubDate>Thu, 13 Jun 2019 03:54:36 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/coredump/</guid>
      <description>问题现象 进程概率性coredump 分析过程 分析core文件，堆栈栈顶函数为strncmp，coredump的原因是给strncmp传递的字符</description>
    </item>
    
    <item>
      <title>gdb中的多线程和信号处理</title>
      <link>https://cvvz.github.io/post/gdb-muti-process-and-signal-handle/</link>
      <pubDate>Mon, 10 Jun 2019 11:44:52 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/gdb-muti-process-and-signal-handle/</guid>
      <description>多线程调试 使用GDB调试多线程时，控制程序的执行模式主要分两种：all-stop 模式和 non-stop 模式。 All-Stop 任何一个线程在断点处hang住时，所有其他线</description>
    </item>
    
    <item>
      <title>解剖进程虚拟内存空间</title>
      <link>https://cvvz.github.io/post/anatomy-of-a-program-in-memory/</link>
      <pubDate>Fri, 07 Jun 2019 23:14:03 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/anatomy-of-a-program-in-memory/</guid>
      <description>对于32位 x86 Linux操作系统，典型的进程地址空间如下图所示： 每一个进程运行在各自独立的虚拟内存空间中，从0x00000000到0xFFFF</description>
    </item>
    
    <item>
      <title>system系统调用探秘</title>
      <link>https://cvvz.github.io/post/system-and-shell/</link>
      <pubDate>Thu, 30 May 2019 00:28:40 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/system-and-shell/</guid>
      <description>6月3日更新 新的实验又发现使用/bin/sh和书中行为一致，但使用/bin/bash的行为和本文中的实验一致，看来是不同shell的底层的实</description>
    </item>
    
    <item>
      <title>【问题定位】串口登录失败</title>
      <link>https://cvvz.github.io/post/arm-login-failed/</link>
      <pubDate>Fri, 24 May 2019 02:45:41 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/arm-login-failed/</guid>
      <description>问题现象 通过串口无法正常登录ARM设备，shell闪退。 问题分析 首先梳理一下SSH登录和串口登录两种方式的流程： 两种登录方式首先都要经过PA</description>
    </item>
    
  </channel>
</rss>
