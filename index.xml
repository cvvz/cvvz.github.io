<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vic&#39;s Blog</title>
    <link>https://cvvz.github.io/</link>
    <description>Recent content on Vic&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 29 Nov 2021 15:37:20 +0800</lastBuildDate><atom:link href="https://cvvz.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>读锁有什么用？</title>
      <link>https://cvvz.github.io/post/what-is-rlock-used-for/</link>
      <pubDate>Mon, 29 Nov 2021 15:37:20 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/what-is-rlock-used-for/</guid>
      <description>问这个问题的起因是我在进行code review时，对一个读map前加读锁的代码留下了如下comment： 这里从map中读出脏数据不会有什么问</description>
    </item>
    
    <item>
      <title>怎么让controller周期性的reconcile</title>
      <link>https://cvvz.github.io/post/controller-reconcile/</link>
      <pubDate>Sat, 20 Nov 2021 14:17:23 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/controller-reconcile/</guid>
      <description>问题 怎么让controller每隔1分钟进行一次reconcile，而不需要借助任何外部事件触发？ 虽然解决的方法看似很简单，但是知其然还要知</description>
    </item>
    
    <item>
      <title>Learn More Study Less</title>
      <link>https://cvvz.github.io/read/learn-more-study-less/</link>
      <pubDate>Sun, 10 Oct 2021 23:19:02 +0800</pubDate>
      
      <guid>https://cvvz.github.io/read/learn-more-study-less/</guid>
      <description>这本书介绍了整体性学习法的概念和实践技巧</description>
    </item>
    
    <item>
      <title>okr工作法</title>
      <link>https://cvvz.github.io/read/okr/</link>
      <pubDate>Wed, 15 Sep 2021 19:58:55 +0800</pubDate>
      
      <guid>https://cvvz.github.io/read/okr/</guid>
      <description>OKR工作法最重要的三点：专注在最核心的目标上、任务拆解具体可实施、持续追踪和复盘</description>
    </item>
    
    <item>
      <title>分布式数据库上k8s面临的困境</title>
      <link>https://cvvz.github.io/post/the-difficulty-of-distributed-db-on-cloud/</link>
      <pubDate>Sun, 25 Jul 2021 08:58:26 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/the-difficulty-of-distributed-db-on-cloud/</guid>
      <description>说点虚的 云原生数据库、shared-nothing、算存分离&amp;hellip; 这些概念性的东西，网上资料一大把，看完以后感觉懂了，但是尝试用自</description>
    </item>
    
    <item>
      <title>重学数据结构和算法</title>
      <link>https://cvvz.github.io/post/data-structure-and-algorithm/</link>
      <pubDate>Sun, 18 Jul 2021 21:14:55 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/data-structure-and-algorithm/</guid>
      <description>常见数据结构 数组 数组的时间效率很高，但是空间效率很低，而且不安全，比如访问越界造成踩内存。 很多高级语言都基于基础的数组实现了动态数组，比如J</description>
    </item>
    
    <item>
      <title>重学设计模式</title>
      <link>https://cvvz.github.io/post/design-pattern/</link>
      <pubDate>Sun, 18 Jul 2021 20:40:19 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/design-pattern/</guid>
      <description>设计模式和设计原则的合理应用非常依赖个人经验，用不好有时候会适得其反。学生时代时学习设计模式觉得枯燥，是因为没有实践经验。要多实践，然后再温</description>
    </item>
    
    <item>
      <title>容器2</title>
      <link>https://cvvz.github.io/post/container2/</link>
      <pubDate>Fri, 23 Apr 2021 16:52:20 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/container2/</guid>
      <description>进程 单进程模型 容器中的1号进程对于宿主机而言就是一个普通的进程，它的父进程是runC，runC的父进程是containerd-shim。这个</description>
    </item>
    
    <item>
      <title>kubernetes网络之service</title>
      <link>https://cvvz.github.io/post/k8s-network-service/</link>
      <pubDate>Wed, 30 Dec 2020 15:42:01 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-network-service/</guid>
      <description>在kubernetes中，service其实只是一个保存在etcd里的API对象，并不对应任何具体的实例。service即k8s中的“微服务</description>
    </item>
    
    <item>
      <title>kubernetes网络之CNI与跨节点通信原理</title>
      <link>https://cvvz.github.io/post/k8s-network-cross-host/</link>
      <pubDate>Wed, 30 Dec 2020 09:51:44 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-network-cross-host/</guid>
      <description>初始化infra容器网络环境 当kubelet通过调用CRI的RunPodSandbox创建好PodSandbox，即infra容器后，就需要</description>
    </item>
    
    <item>
      <title>kubernetes网络之DNS</title>
      <link>https://cvvz.github.io/post/k8s-network-dns/</link>
      <pubDate>Wed, 30 Dec 2020 09:41:51 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-network-dns/</guid>
      <description>默认DNS策略 Pod默认的dns策略是 ClusterFirst，意思是先通过kubernetes的权威DNS服务器（如CoreDNS）直接</description>
    </item>
    
    <item>
      <title>容器</title>
      <link>https://cvvz.github.io/post/container/</link>
      <pubDate>Thu, 24 Dec 2020 10:33:00 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/container/</guid>
      <description>容器镜像 容器镜像就是容器的rootfs。通过 Dockerfile 制作容器镜像时，就相当于增加 rootfs 层。通过容器镜像运行一个容器时，操作系统内核先将镜像中的每一层联</description>
    </item>
    
    <item>
      <title>为什么删除Pod时webhook收到三次delete请求</title>
      <link>https://cvvz.github.io/post/k8s-3-deletion-webhook/</link>
      <pubDate>Sun, 13 Dec 2020 19:26:15 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-3-deletion-webhook/</guid>
      <description>最近在玩admission webhook时，发现一个奇怪的现象：我配置了validatingWebhookConfiguration使其监</description>
    </item>
    
    <item>
      <title>Kubernetes Volume实现原理</title>
      <link>https://cvvz.github.io/post/k8s-volume/</link>
      <pubDate>Sat, 12 Dec 2020 12:32:33 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-volume/</guid>
      <description>容器运行时挂载卷的过程 如果CRI是通过dockershim实现的话，kubelet通过CRI接口去拉起一个容器，就好比是通过docker-d</description>
    </item>
    
    <item>
      <title>浅谈单机容器网络</title>
      <link>https://cvvz.github.io/post/container-network/</link>
      <pubDate>Thu, 03 Dec 2020 00:16:18 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/container-network/</guid>
      <description>容器网络环境隔离怎么理解？ 容器的网络环境是隔离的，这个隔离就体现在不共用内核网络协议栈，即不共用网络协议栈要用到的数据和设备了： 传输层：端口</description>
    </item>
    
    <item>
      <title>以aggregated apiserver的方式部署admission webhook</title>
      <link>https://cvvz.github.io/post/why-aggregated-api-server-webhook/</link>
      <pubDate>Tue, 01 Dec 2020 07:19:06 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/why-aggregated-api-server-webhook/</guid>
      <description>热身概念：apiserver认证客户端的方式 apiserver为客户端提供三种认证方式： https双向认证（注意是双向认证，例如kubeco</description>
    </item>
    
    <item>
      <title>kubectl patch</title>
      <link>https://cvvz.github.io/post/k8s-kubectl-patch/</link>
      <pubDate>Sun, 22 Nov 2020 23:16:44 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-kubectl-patch/</guid>
      <description>kubectl patch 用来修改 Kubernetes API 对象的字段。可以通过 --type 参数指定三种不同类型的 patch 方式： strategic：strategic merge patch merge： json merge patch json： json</description>
    </item>
    
    <item>
      <title>浅谈kubernetes监控体系</title>
      <link>https://cvvz.github.io/post/k8s-monitor/</link>
      <pubDate>Fri, 20 Nov 2020 00:24:35 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/k8s-monitor/</guid>
      <description>监控和指标 理解监控 我们可以把监控系统划分为：采集指标、存储、展示和告警四个部分。 存储使用时序数据库TSDB、前端展示使用grafana、告警</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://cvvz.github.io/about/</link>
      <pubDate>Thu, 29 Oct 2020 17:29:14 +0800</pubDate>
      
      <guid>https://cvvz.github.io/about/</guid>
      <description>陈维志@meituan</description>
    </item>
    
    <item>
      <title>【问题定位】Celery Worker产生僵尸进程</title>
      <link>https://cvvz.github.io/post/celery-worker-zombie/</link>
      <pubDate>Mon, 30 Mar 2020 10:36:36 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/celery-worker-zombie/</guid>
      <description>组内有一个基于Flask + rabbitMQ + Celery搭建的web平台，最近在上面开发需求时碰到了一个比较有趣的问题，在这里记录下来。 问题背景 web平台</description>
    </item>
    
  </channel>
</rss>
