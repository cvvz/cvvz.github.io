<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vic&#39;s Blog</title>
    <link>https://cvvz.github.io/</link>
    <description>Recent content on Vic&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 03 Sep 2019 18:44:12 +0800</lastBuildDate><atom:link href="https://cvvz.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://cvvz.github.io/about/</link>
      <pubDate>Thu, 29 Oct 2020 17:29:14 +0800</pubDate>
      
      <guid>https://cvvz.github.io/about/</guid>
      <description>chenweizhi@meituan</description>
    </item>
    
    <item>
      <title>用树莓派分析函数调用栈</title>
      <link>https://cvvz.github.io/post/call-stack/</link>
      <pubDate>Tue, 03 Sep 2019 18:44:12 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/call-stack/</guid>
      <description>理解本篇文章需要具备一些GDB、汇编、寄存器的基础知识。可以在阅读的过程中碰到不理解的地方再针对性的学习。 寄存器 分析函数调用栈涉及到的几个特</description>
    </item>
    
    <item>
      <title>安全知识总结</title>
      <link>https://cvvz.github.io/post/about-computer-security/</link>
      <pubDate>Thu, 22 Aug 2019 12:38:04 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/about-computer-security/</guid>
      <description>加解密算法 对称加密： 用同一个秘钥进行加密和解密，代表算法有AES/DES/RC2/RC5等； 非对称加密： 一次产生公钥和私钥两个秘钥，任意一个</description>
    </item>
    
    <item>
      <title>进程和线程</title>
      <link>https://cvvz.github.io/post/process-and-thread/</link>
      <pubDate>Sun, 23 Jun 2019 20:34:56 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/process-and-thread/</guid>
      <description>从“程序”开始 对于UNIX操作系统，程序是存放在磁盘上的ELF文件（可以通过file命令查看文件类型） 对于windows操作系统，程序是存放</description>
    </item>
    
    <item>
      <title>gdb中的多线程和信号处理</title>
      <link>https://cvvz.github.io/post/gdb-muti-process-and-signal-handle/</link>
      <pubDate>Mon, 10 Jun 2019 11:44:52 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/gdb-muti-process-and-signal-handle/</guid>
      <description>多线程调试 使用GDB调试多线程时，控制程序的执行模式主要分两种：all-stop 模式和 non-stop 模式。 All-Stop 任何一个线程在断点处hang住时，所有其他线</description>
    </item>
    
    <item>
      <title>解剖进程虚拟内存空间</title>
      <link>https://cvvz.github.io/post/anatomy-of-a-program-in-memory/</link>
      <pubDate>Fri, 07 Jun 2019 23:14:03 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/anatomy-of-a-program-in-memory/</guid>
      <description>对于32位 x86 Linux操作系统，典型的进程地址空间如下图所示： 每一个进程运行在各自独立的虚拟内存空间中，从0x00000000到0xFFFF</description>
    </item>
    
    <item>
      <title>Git使用心得</title>
      <link>https://cvvz.github.io/post/usage-of-git/</link>
      <pubDate>Sun, 02 Jun 2019 23:41:24 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/usage-of-git/</guid>
      <description>整理一下最近学习的git知识，以及平时常用的git功能。 .git 使用git init或clone一个远端仓，会在本地建立一个.git目录。这个目录是</description>
    </item>
    
    <item>
      <title>进程间通信</title>
      <link>https://cvvz.github.io/post/ipc/</link>
      <pubDate>Fri, 02 Nov 2018 22:34:20 +0800</pubDate>
      
      <guid>https://cvvz.github.io/post/ipc/</guid>
      <description>进程间通信的六种方式： 管道 共享内存 消息队列 信号量 信号 socket 管道 管道机制和UNIX系统的文件系统密切关联，使用管道和使用文件系统非常类似。实际上使</description>
    </item>
    
  </channel>
</rss>
